(*  SPDX-FileCopyrightText: (c) 2023-2024 David Stainton
    SPDX-License-Identifier: AGPL-3.0-only

    KEM Sphinx Cryptographic Packet format

    This specification is based on the paper:

    Post Quantum Sphinx
    https://eprint.iacr.org/2023/1960.pdf

    which is just a simple variation of the original Sphinx packet format:

    Sphinx: A Compact and Provably Secure Mix Format
    https://cypherpunks.ca/~iang/pubs/Sphinx_Oakland09.pdf

    Here we sacrifice the compactness of the original (NIKE) Sphinx packet format
    for the speed of using a KEM and performing only one public key
    operations per hop.

    Here we aren't modeling the Sphinx header's routing information
    block with it's complicated XOR'd padded structure. Instead we
    simplify our model and we encrypt the routing info block without
    any padding. This is a simplification that doesn't affect the security
    properties but in a real implementation the padding would be necessary
    to prevent the packet from changing in length as it traverses the network.
*)

(* ---------------------------------------------------------------- *)
(* Parameters                                                       *)
(* ---------------------------------------------------------------- *)

set traceBacktracking = false.
set reconstructTrace = false.
set attacker = passive.

(* ---------------------------------------------------------------- *)
(* Types                                                            *)
(* ---------------------------------------------------------------- *)
type Signal.
type Principal.
type SphinxPacket.
type KDF_Output.

type StreamKey.
type PayloadKey.
type MacKey.
type PublicKey.
type PrivateKey.
type SPRP_Key.

(* Events *)
event Mix1SharedSecretCorrect().
event Mix1SharedSecretIncorrect().
event Mix2SharedSecretCorrect().
event Mix2SharedSecretIncorrect().

event IntegrityCheckFailedMix1().
event IntegrityCheckFailedMix2().
event ReceivedFinalPayload().
event Mix1ReceivedSphinxPacket(SphinxPacket).
event Mix2ReceivedSphinxPacket(SphinxPacket).
event Mix1GeneratedKeyPair(PrivateKey).
event Mix2GeneratedKeyPair(PrivateKey).
event ClientReceivedAllKeys(bitstring).
event ClientCreatedPacket(SphinxPacket).

(* ---------------------------------------------------------------- *)
(* Constants                                                        *)
(* ---------------------------------------------------------------- *)
const zero:bitstring  [data].
const mix1:Principal  [data].
const mix2:Principal  [data].
const ready:Signal.

(* ---------------------------------------------------------------- *)
(* Channels                                                         *)
(* ---------------------------------------------------------------- *)

const witness_mix1_chan:channel [private].
const witness_mix2_chan:channel [private].

const pubkey_mix1_chan:channel [private].
const pubkey_mix2_chan:channel [private].

const privkey_mix1_chan:channel [private].
const privkey_mix2_chan:channel [private].

const mix1_ready_chan: channel [private].
const mix2_ready_chan: channel [private].

free mix1_read_chan: channel.
free mix2_read_chan: channel.

(* ---------------------------------------------------------------- *)
(* Cryptographic Primitives                                         *)
(* ---------------------------------------------------------------- *)

(* KEM operations *)
fun to_PublicKey(PrivateKey):PublicKey.
fun internal_kem_enc(PublicKey, bitstring):bitstring.
fun internal_kem_dec(PrivateKey, bitstring):bitstring
reduc forall sk:PrivateKey,m:bitstring;
      internal_kem_dec(sk,internal_kem_enc(to_PublicKey(sk),m)) = m.

letfun kempriv2pub(k:PrivateKey) = to_PublicKey(k).

letfun encapsulate(pk:PublicKey) =
       new ss:bitstring;
       (internal_kem_enc(pk,ss),ss).

letfun decapsulate(sk:PrivateKey,ct:bitstring) =
       internal_kem_dec(sk,ct).

fun from_PublicKey(PublicKey):bitstring.

(* SPRP *)

fun to_sprp_key(bitstring):SPRP_Key.
fun sprp_encrypt(SPRP_Key, bitstring):bitstring.
reduc forall k:SPRP_Key, p:bitstring;
    sprp_decrypt(k, sprp_encrypt(k, p)) = p.

(* MAC *)

fun pub_key(Principal): PublicKey.

fun to_mac_key(bitstring):MacKey.
fun mac(MacKey, bitstring): bitstring.
fun verify_mac(MacKey, bitstring, bitstring):bool reduc
    forall k:MacKey, my_plaintext:bitstring, t:bitstring;
        verify_mac(k, my_plaintext, mac(k, my_plaintext)) = true.

(* KDF *)

fun pack_kdf_output(bitstring, bitstring, bitstring):KDF_Output.
fun kdf(bitstring):KDF_Output.
fun kdf_output_to_integrity_key(KDF_Output):bitstring.
fun kdf_output_to_routing_info_key(KDF_Output):bitstring.
fun kdf_output_to_payload_key(KDF_Output):bitstring.

equation forall ik:bitstring, rik:bitstring, payload_key:bitstring;
    kdf_output_to_integrity_key(pack_kdf_output(ik, rik, payload_key)) = ik.
equation forall ik:bitstring, rik:bitstring, payload_key:bitstring;
    kdf_output_to_routing_info_key(pack_kdf_output(ik, rik, payload_key)) = rik.
equation forall ik:bitstring, rik:bitstring, payload_key:bitstring;
    kdf_output_to_payload_key(pack_kdf_output(ik, rik, payload_key)) = payload_key.

(* custome Sphinx stream cipher *)

fun to_stream_key(bitstring):StreamKey.
fun stream_cipher(StreamKey, bitstring): bitstring.
reduc forall k:StreamKey, input_data:bitstring;
  stream_cipher_decrypt(k, stream_cipher(k, input_data)) = input_data.

(* routing commands *)

fun routing_commands_to_kem_ciphertext(bitstring):bitstring.
fun routing_commands_to_integrity_tag(bitstring):bitstring.
fun routing_commands_to_pubkey(bitstring):bitstring.
fun routing_commands_to_routing_info(bitstring):bitstring.
fun pack_routing_commands(bitstring, bitstring, bitstring, bitstring):bitstring.
equation forall my_kem_ciphertext:bitstring, my_integrity_tag:bitstring, pubkey:bitstring, routing_info:bitstring;
    routing_commands_to_kem_ciphertext(pack_routing_commands(my_kem_ciphertext, my_integrity_tag, pubkey, routing_info)) = my_kem_ciphertext.
equation forall my_kem_ciphertext:bitstring, my_integrity_tag:bitstring, pubkey:bitstring, routing_info:bitstring;
    routing_commands_to_integrity_tag(pack_routing_commands(my_kem_ciphertext, my_integrity_tag, pubkey, routing_info)) = my_integrity_tag.
equation forall my_kem_ciphertext:bitstring, my_integrity_tag:bitstring, pubkey:bitstring, routing_info:bitstring;
    routing_commands_to_pubkey(pack_routing_commands(my_kem_ciphertext, my_integrity_tag, pubkey, routing_info)) = pubkey.
equation forall my_kem_ciphertext:bitstring, my_integrity_tag:bitstring, pubkey:bitstring, routing_info:bitstring;
    routing_commands_to_routing_info(pack_routing_commands(my_kem_ciphertext, my_integrity_tag, pubkey, routing_info)) = routing_info.

(*
    A sphinx packet is a 4-tuple of the form:
    (KEM ciphertext, routing info, integrity tag, payload)
*)
fun pack_sphinx_packet(bitstring, bitstring, bitstring, bitstring): SphinxPacket.
fun sphinx_to_kem_ciphertext(SphinxPacket):bitstring.
fun sphinx_to_routing_info(SphinxPacket):bitstring.
fun sphinx_to_integrity_tag(SphinxPacket):bitstring.
fun sphinx_to_payload(SphinxPacket):bitstring.

equation forall my_kem_ciphertext:bitstring, routing_info:bitstring, my_integrity_tag:bitstring, body:bitstring;
    sphinx_to_kem_ciphertext(pack_sphinx_packet(my_kem_ciphertext, routing_info, my_integrity_tag, body)) = my_kem_ciphertext.
equation forall my_kem_ciphertext:bitstring, routing_info:bitstring, my_integrity_tag:bitstring, body:bitstring;
    sphinx_to_routing_info(pack_sphinx_packet(my_kem_ciphertext, routing_info, my_integrity_tag, body)) = routing_info.
equation forall my_kem_ciphertext:bitstring, routing_info:bitstring, my_integrity_tag:bitstring, body:bitstring;
    sphinx_to_integrity_tag(pack_sphinx_packet(my_kem_ciphertext, routing_info, my_integrity_tag, body)) = my_integrity_tag.
equation forall my_kem_ciphertext:bitstring, routing_info:bitstring, my_integrity_tag:bitstring, body:bitstring;
    sphinx_to_payload(pack_sphinx_packet(my_kem_ciphertext, routing_info, my_integrity_tag, body)) = body.

(* ---------------------------------------------------------------- *)
(* Client side                                                      *)
(* ---------------------------------------------------------------- *)

let client_send_process() = 
    in(pubkey_mix1_chan, mix1_pubkey:PublicKey);
    in(pubkey_mix2_chan, mix2_pubkey:PublicKey);
    in(mix1_ready_chan, signal1:Signal);
    in(mix2_ready_chan, signal2:Signal);
    new client_plaintext:bitstring;
    event ClientReceivedAllKeys(zero);

    (* create sphinx packet *)

    (* first hop *)
    let (kem_ciphertext1:bitstring, shared_secret1:bitstring) = encapsulate(mix1_pubkey) in
    let kdf_output1 = kdf(shared_secret1) in
    let integrity_key1 = kdf_output_to_integrity_key(kdf_output1) in
    let routing_info_key1 = kdf_output_to_routing_info_key(kdf_output1) in
    let payload_key1 = kdf_output_to_payload_key(kdf_output1) in
    out(witness_mix1_chan, shared_secret1);

    (* last hop *)
    let (kem_ciphertext2:bitstring, shared_secret2:bitstring) = encapsulate(mix2_pubkey) in
    let kdf_output2 = kdf(shared_secret2) in
    let integrity_key2 = kdf_output_to_integrity_key(kdf_output2) in
    let routing_info_key2 = kdf_output_to_routing_info_key(kdf_output2) in
    let payload_key2 = kdf_output_to_payload_key(kdf_output2) in
    out(witness_mix2_chan, shared_secret2);

    (* last hop *)
    let routing_cmds2 = zero in
    let routing_info2 = stream_cipher(to_stream_key(routing_info_key2), routing_cmds2) in
    let IntegrityTag2 = mac(to_mac_key(integrity_key2), routing_info2) in

    (* first hop *)
    let routing_cmds1 = pack_routing_commands(kem_ciphertext2, IntegrityTag2, from_PublicKey(mix2_pubkey), routing_info2) in
    let routing_info1 = stream_cipher(to_stream_key(routing_info_key1), routing_cmds1) in
    let IntegrityTag1 = mac(to_mac_key(integrity_key1), routing_info1) in

    let payload2 = sprp_encrypt(to_sprp_key(payload_key2), client_plaintext) in
    let payload1 = sprp_encrypt(to_sprp_key(payload_key1), payload2) in

    let packet = pack_sphinx_packet(kem_ciphertext1, routing_info1, IntegrityTag1, payload1) in

    event ClientCreatedPacket(packet);
    out(mix1_read_chan, packet).

(* ---------------------------------------------------------------- *)
(* Server side                                                      *)
(* ---------------------------------------------------------------- *)

(* Mix1 generates its keypair *)
let mix1_gen_keypair() =
    new mix1_privkey: PrivateKey;
    event Mix1GeneratedKeyPair(mix1_privkey);
    let mix1_pubkey = to_PublicKey(mix1_privkey) in
    out(privkey_mix1_chan, mix1_privkey);
    out(pubkey_mix1_chan, mix1_pubkey);
    out(mix1_ready_chan, ready);
    event Mix1GeneratedKeyPair(mix1_privkey).

(* Mix2 generates its keypair *)
let mix2_gen_keypair() =
    new mix2_privkey: PrivateKey;
    let mix2_pubkey = to_PublicKey(mix2_privkey) in 
    out(privkey_mix2_chan, mix2_privkey);
    out(pubkey_mix2_chan, mix2_pubkey);
    out(mix2_ready_chan, ready);
    event Mix2GeneratedKeyPair(mix2_privkey).

let mix1_process() =
    in(privkey_mix1_chan, mix1_privkey:PrivateKey);
    in(mix1_read_chan, packet:SphinxPacket);
    event Mix1ReceivedSphinxPacket(packet);

    let my_kem_ciphertext = sphinx_to_kem_ciphertext(packet) in
    let routing_info = sphinx_to_routing_info(packet) in
    let my_integrity_tag = sphinx_to_integrity_tag(packet) in
    let my_payload = sphinx_to_payload(packet) in

    let shared_secret = decapsulate(mix1_privkey, my_kem_ciphertext) in
    out(witness_mix1_chan, shared_secret);

    let kdf_output = kdf(shared_secret) in
    let my_integrity_key = kdf_output_to_integrity_key(kdf_output) in
    let routing_info_key1 = kdf_output_to_routing_info_key(kdf_output) in
    let PayloadKey1 = kdf_output_to_payload_key(kdf_output) in

    let mac_ok = verify_mac(to_mac_key(my_integrity_key), routing_info, my_integrity_tag) in

    if ( mac_ok = true) then (

        let routing_cmds = stream_cipher_decrypt(to_stream_key(routing_info_key1), routing_info) in

        let kem2_ciphertext = routing_commands_to_kem_ciphertext(routing_cmds) in
        let IntegrityTag2 = routing_commands_to_integrity_tag(routing_cmds) in
        let mix2_pubkey = routing_commands_to_pubkey(routing_cmds) in
        let routing_info2 = routing_commands_to_routing_info(routing_cmds) in

        let next_payload = sprp_decrypt(to_sprp_key(PayloadKey1), my_payload) in
        out(mix2_read_chan, pack_sphinx_packet(kem2_ciphertext, routing_info2, IntegrityTag2, next_payload))
    ) else (
        event IntegrityCheckFailedMix1
    ).

let mix2_process() =
    in(privkey_mix2_chan, mix2_privkey:PrivateKey);
    in(mix2_read_chan, packet:SphinxPacket);
    event Mix2ReceivedSphinxPacket(packet);

    let mix2_kem_ciphertext = sphinx_to_kem_ciphertext(packet) in
    let mix2_routing_info = sphinx_to_routing_info(packet) in
    let mix2_integrity_tag = sphinx_to_integrity_tag(packet) in
    let mix2_payload = sphinx_to_payload(packet) in

    let shared_secret = decapsulate(mix2_privkey, mix2_kem_ciphertext) in
    out(witness_mix2_chan, shared_secret);

    let mix2_kdf_output = kdf(shared_secret) in
    let mix2_integrity_key = kdf_output_to_integrity_key(mix2_kdf_output) in
    let mix2_routing_info_key = kdf_output_to_routing_info_key(mix2_kdf_output) in
    let mix2_payload_key = kdf_output_to_payload_key(mix2_kdf_output) in

    let mix2_mac_ok = verify_mac(to_mac_key(mix2_integrity_key), mix2_routing_info, mix2_integrity_tag) in
    if ( mix2_mac_ok = true ) then (
        let routing_cmds = stream_cipher_decrypt(to_stream_key(mix2_routing_info_key), mix2_routing_info) in
        let final_payload = sprp_decrypt(to_sprp_key(mix2_payload_key), mix2_payload) in
        event ReceivedFinalPayload()
    ) else (
        event IntegrityCheckFailedMix2()
    ).

let shared_secret_witness_mix1() =
    in(witness_mix1_chan, expected_mix1_shared_secret:bitstring);
    in(witness_mix1_chan, actual_mix1_shared_secret:bitstring);
    if (expected_mix1_shared_secret = actual_mix1_shared_secret) then (
        event Mix1SharedSecretCorrect()
    ) else (
        event Mix1SharedSecretIncorrect()
    ).

let shared_secret_witness_mix2() =
    in(witness_mix2_chan, expected_mix2_shared_secret:bitstring);
    in(witness_mix2_chan, actual_mix2_shared_secret:bitstring);
    if (expected_mix2_shared_secret = actual_mix2_shared_secret) then (
        event Mix2SharedSecretCorrect()
    ) else (
        event Mix2SharedSecretIncorrect()
    ).

(* ---------------------------------------------------------------- *)
(* Queries                                                          *)
(* ---------------------------------------------------------------- *)

query event(Mix1SharedSecretCorrect).
query event(Mix1SharedSecretIncorrect).
query event(Mix2SharedSecretCorrect).
query event(Mix2SharedSecretIncorrect).
query event(IntegrityCheckFailedMix1()).
query event(IntegrityCheckFailedMix2()).
query event(ReceivedFinalPayload()).

query packet:SphinxPacket;
    event(Mix1ReceivedSphinxPacket(packet)).

query packet:SphinxPacket;
    event(Mix2ReceivedSphinxPacket(packet)).

query privkey:PrivateKey;
    event(Mix1GeneratedKeyPair(privkey)).

query privkey:PrivateKey;
    event(Mix2GeneratedKeyPair(privkey)).

query b:bitstring;
    event(ClientReceivedAllKeys(b)).

query packet:SphinxPacket;
    event(ClientCreatedPacket(packet)).

(* ---------------------------------------------------------------- *)
(* Composition                                                      *)
(* ---------------------------------------------------------------- *)
process
    (
      mix1_gen_keypair() 
      | mix2_gen_keypair()
      | !shared_secret_witness_mix1()
      | !shared_secret_witness_mix2()
      | !mix1_process()
      | !mix2_process()
      | client_send_process()
    )